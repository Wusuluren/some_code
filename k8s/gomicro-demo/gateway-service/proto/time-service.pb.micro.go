// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/time-service.proto

package timeservice

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TimeService service

func NewTimeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TimeService service

type TimeService interface {
	GetTime(ctx context.Context, in *GetTimeRequest, opts ...client.CallOption) (*GetTimeReply, error)
}

type timeService struct {
	c    client.Client
	name string
}

func NewTimeService(name string, c client.Client) TimeService {
	return &timeService{
		c:    c,
		name: name,
	}
}

func (c *timeService) GetTime(ctx context.Context, in *GetTimeRequest, opts ...client.CallOption) (*GetTimeReply, error) {
	req := c.c.NewRequest(c.name, "TimeService.GetTime", in)
	out := new(GetTimeReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TimeService service

type TimeServiceHandler interface {
	GetTime(context.Context, *GetTimeRequest, *GetTimeReply) error
}

func RegisterTimeServiceHandler(s server.Server, hdlr TimeServiceHandler, opts ...server.HandlerOption) error {
	type timeService interface {
		GetTime(ctx context.Context, in *GetTimeRequest, out *GetTimeReply) error
	}
	type TimeService struct {
		timeService
	}
	h := &timeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TimeService{h}, opts...))
}

type timeServiceHandler struct {
	TimeServiceHandler
}

func (h *timeServiceHandler) GetTime(ctx context.Context, in *GetTimeRequest, out *GetTimeReply) error {
	return h.TimeServiceHandler.GetTime(ctx, in, out)
}
