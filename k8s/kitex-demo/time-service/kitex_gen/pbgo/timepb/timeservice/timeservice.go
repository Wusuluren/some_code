// Code generated by Kitex v0.1.4. DO NOT EDIT.

package timeservice

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
	"kitex-demo/time-service/kitex_gen/pbgo/timepb"
)

func serviceInfo() *kitex.ServiceInfo {
	return timeServiceServiceInfo
}

var timeServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "TimeService"
	handlerType := (*timepb.TimeService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetTime": kitex.NewMethodInfo(getTimeHandler, newGetTimeArgs, newGetTimeResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "timepb",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.1.4",
		Extra:           extra,
	}
	return svcInfo
}

func getTimeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(timepb.GetTimeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(timepb.TimeService).GetTime(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetTimeArgs:
		success, err := handler.(timepb.TimeService).GetTime(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetTimeResult)
		realResult.Success = success
	}
	return nil
}
func newGetTimeArgs() interface{} {
	return &GetTimeArgs{}
}

func newGetTimeResult() interface{} {
	return &GetTimeResult{}
}

type GetTimeArgs struct {
	Req *timepb.GetTimeReq
}

func (p *GetTimeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetTimeArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetTimeArgs) Unmarshal(in []byte) error {
	msg := new(timepb.GetTimeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetTimeArgs_Req_DEFAULT *timepb.GetTimeReq

func (p *GetTimeArgs) GetReq() *timepb.GetTimeReq {
	if !p.IsSetReq() {
		return GetTimeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetTimeArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetTimeResult struct {
	Success *timepb.GetTimeResp
}

var GetTimeResult_Success_DEFAULT *timepb.GetTimeResp

func (p *GetTimeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetTimeResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetTimeResult) Unmarshal(in []byte) error {
	msg := new(timepb.GetTimeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetTimeResult) GetSuccess() *timepb.GetTimeResp {
	if !p.IsSetSuccess() {
		return GetTimeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetTimeResult) SetSuccess(x interface{}) {
	p.Success = x.(*timepb.GetTimeResp)
}

func (p *GetTimeResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetTime(ctx context.Context, Req *timepb.GetTimeReq) (r *timepb.GetTimeResp, err error) {
	var _args GetTimeArgs
	_args.Req = Req
	var _result GetTimeResult
	if err = p.c.Call(ctx, "GetTime", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
